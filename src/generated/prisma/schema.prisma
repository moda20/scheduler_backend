generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["linux-arm64-openssl-1.1.x", "darwin-arm64"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model SequelizeMeta {
  name String @id @unique(map: "name") @db.VarChar(255)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model cache_files {
  id              Int       @id @unique(map: "id") @default(autoincrement())
  job_log_id      String    @db.VarChar(255)
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime  @default(now()) @db.DateTime(0)
  file_name       String    @db.VarChar(255)
  file_tags       String?   @db.VarChar(255)
  file_path       String    @db.VarChar(255)
  file_size       BigInt
  time_to_live    BigInt
  file_type       String    @db.VarChar(255)
  last_downloaded DateTime? @db.DateTime(0)

  schedule_job_log schedule_job_log @relation(fields: [job_log_id], references: [job_log_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model output_files {
  id              Int       @id @unique(map: "id") @default(autoincrement())
  job_log_id      String    @db.VarChar(255)
  created_at      DateTime  @default(now()) @db.DateTime(0)
  updated_at      DateTime  @default(now()) @db.DateTime(0)
  file_name       String    @db.VarChar(255)
  file_tags       String?   @db.VarChar(255)
  file_path       String    @db.VarChar(255)
  file_size       BigInt
  file_type       String    @db.VarChar(255)
  last_downloaded DateTime? @db.DateTime(0)

  schedule_job_log schedule_job_log @relation(fields: [job_log_id], references: [job_log_id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model proxy {
  id          Int          @id @default(autoincrement())
  proxy_ip    String       @db.VarChar(255)
  proxy_port  Int
  protocol    String       @db.VarChar(255)
  username    String?      @db.VarChar(255)
  password    String?      @db.VarChar(255)
  description String?      @db.Text
  status      proxy_status @default(active)
  created_at  DateTime     @default(now()) @db.DateTime(0)
  updated_at  DateTime     @default(now()) @updatedAt() @db.DateTime(0)
  jobs        proxy_job[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model proxy_job {
  id           Int          @id @default(autoincrement())
  job_id       Int
  proxy_id     Int
  created_at   DateTime     @default(now()) @db.DateTime(0)
  updated_at   DateTime     @default(now()) @updatedAt() @db.DateTime(0)
  schedule_job schedule_job @relation(fields: [job_id], references: [job_id], onDelete: NoAction, onUpdate: NoAction, map: "proxy_job_ibfk_1")
  proxy        proxy        @relation(fields: [proxy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "proxy_job_ibfk_2")

  @@index([job_id], map: "job_id")
  @@index([proxy_id], map: "proxy_id")
}

model schedule_job {
  job_id           Int                @id @default(autoincrement())
  job_name         String             @unique(map: "job_name") @default("") @db.VarChar(200)
  job_param        String?            @db.LongText
  job_cron_setting String             @default("") @db.VarChar(100)
  consumer         String             @default("") @db.VarChar(1000)
  exclusive        String             @default("") @db.VarChar(5)
  status           String             @default("") @db.VarChar(10)
  average_time     Float?             @db.Float
  created_at       DateTime?          @default(now()) @db.DateTime(0)
  job_logs         schedule_job_log[]
  proxies          proxy_job[]
}

model schedule_job_log {
  job_log_id   String         @id @db.VarChar(100)
  job_id       Int
  machine      String?        @db.VarChar(100)
  start_time   DateTime       @db.DateTime(0)
  end_time     DateTime?      @db.DateTime(0)
  result       String?        @db.LongText
  error        String?        @db.LongText
  schedule_job schedule_job   @relation(fields: [job_id], references: [job_id], onDelete: NoAction, onUpdate: NoAction)
  cache_files  cache_files[]
  output_files output_files[]

  @@index([job_id], map: "job_id")
}

enum proxy_status {
  active
  inactive
}
